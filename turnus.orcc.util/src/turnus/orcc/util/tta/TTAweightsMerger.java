/* 
 * TURNUS - www.turnus.co
 * 
 * Copyright (C) 2010-2016 EPFL SCI STI MM
 *
 * This file is part of TURNUS.
 *
 * TURNUS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TURNUS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TURNUS.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7
 * 
 * If you modify this Program, or any covered work, by linking or combining it
 * with Eclipse (or a modified version of Eclipse or an Eclipse plugin or 
 * an Eclipse library), containing parts covered by the terms of the 
 * Eclipse Public License (EPL), the licensors of this Program grant you 
 * additional permission to convey the resulting work.  Corresponding Source 
 * for a non-source form of such a combination shall include the source code 
 * for the parts of Eclipse libraries used as well as that of the  covered work.
 * 
 */
package turnus.orcc.util.tta;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.events.XMLEvent;

import com.google.common.collect.Iterators;

import turnus.common.TurnusException;
import turnus.model.dataflow.Action;
import turnus.model.dataflow.Actor;
import turnus.model.mapping.NetworkWeight;
import turnus.model.mapping.data.ClockCycles;
import turnus.model.trace.Trace.Order;
import turnus.model.trace.TraceProject;

/**
 * Class to merge the weights and scheduling cost generated by TTA profiling.
 * Scheduling cost is incorporated to the original weight.
 * 
 * @author Malgorzata Michalska
 * 
 */
public class TTAweightsMerger {

	private Map<String, Double> schedCostMap = new HashMap<String, Double>();

	public void readSchedCost(File schedFile) throws TurnusException {
		XMLStreamReader reader = null;
		try {
			InputStream stream = new BufferedInputStream(new FileInputStream(schedFile));
			reader = XMLInputFactory.newInstance().createXMLStreamReader(stream);
		} catch (Exception e) {
			throw new TurnusException("File \"" + schedFile.getAbsolutePath() + "\" cannot be opened");
		}

		String name = null;
		String clockcycles = null;
		try {
			while (reader.hasNext()) {
				reader.next();
				switch (reader.getEventType()) {
				case XMLEvent.START_ELEMENT: {
					String xmlElement = reader.getName().toString();
					if (xmlElement.equals("actor")) {
						name = reader.getAttributeValue(0);
						if (name == null) {
							throw new TurnusException("Parsing error in \"" + schedFile.getAbsolutePath()
									+ "\": actor name not specified. Line " + reader.getLocation().getLineNumber());
						}
					} else if (xmlElement.equals("scheduling")) {
						clockcycles = reader.getAttributeValue(0);
						if (clockcycles == null) {
							throw new TurnusException("Parsing error in \"" + schedFile.getAbsolutePath()
									+ "\": number of clockcycles not specified. Line "
									+ reader.getLocation().getLineNumber());
						}
						schedCostMap.put(name, Double.parseDouble(clockcycles));
					}
				}
				}
			}
		} catch (Exception e) {
			throw new TurnusException("File \"" + schedFile.getAbsolutePath() + "\" cannot be parsed");
		}

	}

	public void updateNetworkWeight(NetworkWeight weight, TraceProject tProject) {
		for (Actor actor : tProject.getNetwork().getActors()) {
			long stepsNumberActor = Iterators
					.size(tProject.getTrace().getSteps(Order.INCREASING_ID, actor.getName()).iterator());
			for (Action action : actor.getActions()) {
				ClockCycles w = weight.getWeight(actor.getName(), action.getName());
				double schedulingOverhead = 0;
				long stepsNumberAction = Iterators.size(tProject.getTrace()
						.getSteps(Order.INCREASING_ID, actor.getName(), action.getName()).iterator());
				if (schedCostMap.containsKey(actor.getName()) && stepsNumberAction > 0)
					schedulingOverhead = schedCostMap.get(actor.getName()) / (double) stepsNumberActor;

				schedulingOverhead = schedulingOverhead < 0 ? 0 : schedulingOverhead;

				w.setMeanClockCycles(w.getMeanClockCycles() + schedulingOverhead);
				w.setMinClockCycles(w.getMinClockCycles() + schedulingOverhead);
				w.setMaxClockCycles(w.getMaxClockCycles() + schedulingOverhead);
			}
		}
	}
}
